import org.apache.tools.ant.filters.ReplaceTokens
apply from: "dependencyDefinitions.gradle"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
//打包成war配置

//apply plugin: 'war'
//
//war {
//    baseName = 'h5'
//}

//打包成jar

jar {
    baseName = 'h5'
}

repositories {
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")

    compile ('org.springframework.boot:spring-boot-starter-log4j2')
    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator")

    compile("org.springframework.boot:spring-boot-starter-mail")
    // end::actuator[]
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1")

    compile("org.springframework.boot:spring-boot-devtools")

    compile("org.jsoup:jsoup:1.10.3")

    compile("org.zeroturnaround:zt-zip:1.12")

    compile("org.springframework.boot:spring-boot-starter-websocket")

    compile(
            libraries.'mysql',
            libraries.'jwt',
            libraries.'spring-data-commons',
            libraries.'commons-codec',
            libraries.'commons-lang3',
            libraries.'commons-io',
    )

//    optional "org.springframework.boot:spring-boot-configuration-processor"

    testCompile("junit:junit")
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'dev'
    project.ext.envrionment = environment
    println "Environment is set to $environment"

    def configFile = file('environment.groovy')
    def config = new ConfigSlurper("$environment").parse(configFile.toURL())
    project.ext.config = config
    config.toProperties()
}


processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens,
                tokens: loadConfiguration()
        )
    }
}

springBoot {
    executable = true
}
